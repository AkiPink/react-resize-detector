[{"/Users/maslianok/www/react-resize-detector/examples/src/index.js":"1","/Users/maslianok/www/react-resize-detector/examples/src/App.js":"2"},{"size":139,"mtime":1542112866161,"results":"3","hashOfConfig":"4"},{"size":2545,"mtime":1611905473924,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1ob65w1",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/maslianok/www/react-resize-detector/examples/src/index.js",[],["12","13"],"/Users/maslianok/www/react-resize-detector/examples/src/App.js",["14"],"import React, { useEffect, useState } from 'react';\nimport { useResizeDetector, withResizeDetector } from 'react-resize-detector/build/withPolyfill';\n\nconst s = {\n  wrapper: {\n    display: 'flex',\n    height: '100vh'\n  },\n  leftColumn: {\n    display: 'flex',\n    width: '200px',\n    backgroundColor: 'aqua',\n    padding: '10px',\n    boxSizing: 'border-box'\n  },\n  rightColumn: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n    flexGrow: 1,\n    fontSize: '30px',\n    textAlign: 'center'\n  },\n  toggleLeftColumnBtn: {\n    position: 'absolute',\n    top: '5px',\n    left: '5px',\n    fontSize: '14px'\n  },\n  dimensions: {\n    fontSize: '18px'\n  }\n};\n\nconst MainFrame = ({ onHideLeftPanel }) => {\n  const [count, setCount] = useState(0);\n  const { width, height, ref } = useResizeDetector();\n  // { refreshMode: 'debounce', refreshRate: 2000, skipOnMount: true }\n\n  useEffect(() => {\n    if (width || height) {\n      setCount(count => count + 1);\n    }\n  }, [width, height]);\n\n  return (\n    <div style={s.rightColumn} ref={ref}>\n      <div style={s.toggleLeftColumnBtn}>\n        <button onClick={onHideLeftPanel} type=\"button\">\n          Toggle left panel\n        </button>\n        <span> or resize window.</span>\n      </div>\n\n      <div>{`Main div resized ${count} times`}</div>\n      <div style={s.dimensions}>{`Width: ${width}, Height: ${height}`}</div>\n    </div>\n  );\n};\n\n// const MainFrameInner = ({ onHideLeftPanel, width, height }) => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     if (width || height) {\n//       setCount(count => count + 1);\n//     }\n//   }, [width, height, setCount]);\n\n//   return (\n//     <div style={s.rightColumn}>\n//       <div style={s.toggleLeftColumnBtn}>\n//         <button onClick={onHideLeftPanel} type=\"button\">\n//           Toggle left panel\n//         </button>\n//         <span> or resize window.</span>\n//       </div>\n\n//       <div>{`Main div resized ${count} times`}</div>\n//       <div style={s.dimensions}>{`Width: ${width}, Height: ${height}`}</div>\n//     </div>\n//   );\n// };\n\n// const MainFrame = withResizeDetector(MainFrameInner);\n\nconst App = () => {\n  const [isLeftPanelVisible, setLeftPanelVisibility] = useState(true);\n\n  return (\n    <div style={s.wrapper}>\n      {isLeftPanelVisible && <div style={s.leftColumn}>Left panel content</div>}\n      <MainFrame onHideLeftPanel={() => setLeftPanelVisibility(isVisible => !isVisible)} />\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":2,"column":29,"nodeType":"21","messageId":"22","endLine":2,"endColumn":47},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'withResizeDetector' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]